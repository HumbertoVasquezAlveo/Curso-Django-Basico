Este es el cuaderno de notas del curso de Django basico.

clase 5
creacion del proyecto de plazigram
setiins = define las configiraciones del proyecto
urls = punto de entrada para todas las peticiones que llegan añl pruecto esta indexada con su vista correspondiente.
wsgi = usado en el deployament en produccion.
manage.py = nunca se toca.
Vistas = solamente son funciones o clases


clase 6
El Objeto Request
Dispatch de urls = 
funciones que responden a una peticion http= Vistas
URL > Vista >> una url que apunta a una vista.

debugger > import pdb; pdb.set_trace()

"despues de esstar en debugger"
>
request 
request.META > son los header
request.method > ver que tipo de metodos
request.GET


clase 7
Pasando argumentos en la URL
.split >
json.dumps > transforma un diccionario a json


clase 8
Creacion de la primera App
python manage.py startapp posts > creando una aplicacion.
ir a settings, install apas y escribir entre comillas en nombre de App



clase 9
Introduccion al Template system
render > es una funcion que toma un request
Built-in

template > maneja la logica de como se ven los datos.
vistas   > maneja la logica que traen los datos.



clase 10
Patrones de diseño y Django
Model,View,Controller

Django usa:
Model,Template,View.
script cgi que es!

contoller > maneja la logica del request
model     > define la estructura de los datos
View      > como presentar los datos al usuario

MODEL-TEMPLATE-View
templade > decide como se ven los datos
model    > define la estructura de los datos
view     > se encarga de pasarlos los datos al template.



Clase 11
La M en el MTV
ORM > investigar

models.DateField()        > almacena la fecha
models.DateTimeField()    > almacena tambien la hora

UUIDField > investigar
auto_now_add > cuando se creee una instancia en la DB le va a cargar la fecha en que se creo.
auto_now    > le va acargar la fecha en la que se edito por ultima ves.
blank > indica vacio


Clase 12
El ORM de Django
borrar un usuario > humberto.delete()

crear datos instanciando la clase:
(Instancia de User):
from posts.models import User > importando el modelo
lucas = User()
lucas.email = 'lucas@gmail.com'

querys > traer informacion

traer un objeto > traer un usuario
user = User.objects.get(email='vayolet@hotmail.com')


QUERYSET >
traer todos los usuarios >
user_local = User.objects.filter(email__endswith='@gmail.com')  > query para traer solo los @platzi.com
user = User.objects.all() > traer todos los usuarios

ver quien es is_admin
for u in user_local:
    print(u.email, ':', u.is_admin)

cambiando a is_admin
user_local = User.objects.filter(email__endswith='@gmail.com').update(is_admin)





clase 13
GLOSARIO
ORM: Object-relational mapping. Es el encargado de permitir
el acceso y control de una base de datos relacional a través de
una abstracción a clases y objetos.

Templates: Archivos HTML que permiten la inclusión y ejecución
de lógica especial para la presentación de datos.

Modelo: Parte de un proyecto de Django que se encarga de estructurar
las tablas y propiedades de la base de datos a través de clases de Python.

Vista: Parte de un proyecto de Django que se encarga de la
lógica de negocio y es la conexión entre el template y el modelo.

App: Conjunto de código que se encarga de resolver una parte
muy específica del proyecto, contiene sus modelos, vistas, urls, etc.

Patrón de diseño: Solución común a un problema particular.




clase 14
Extendiendo el Modelo de usuario

crear usuario desde el modelo de auth_user >
from django.contrib.auth.models import User
u = User.objects.create_user(username='Estefany', password='admin123')












